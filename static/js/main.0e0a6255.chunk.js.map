{"version":3,"sources":["game/model/Card.ts","game/model/Player.ts","game/model/Game.ts","game/model/Actions.ts","common/ArrayTools.ts","game/GameEngine.ts","components/CardSprite.tsx","components/CardList.tsx","components/DeckCard.tsx","components/GameDeckActionBar.tsx","common/useKeyDownHook.ts","game/Sounds.ts","components/Shipyard.tsx","components/PlayerBoard.tsx","components/PlayerList.tsx","components/PiratatakBoard.tsx","components/CreateGamePanel.tsx","App.jsx","index.js"],"names":["CardType","BoatColor","Card","type","this","BoatCard","color","piece","BOAT","CannonCard","CANNON","GoldCoinCard","GOLD_COIN","PirateCard","id","PIRATE","Player","name","cards","boatColor","selectedCards","getBoatCards","filter","card","map","length","last","Game","playerNames","deck","players","playerTurn","turnCount","winningPlayer","usedDeck","lastCard","Action","TakeCardAction","EndTurnAction","BuyBoatAction","targetCard","GiveCardsAction","shuffle","array","m","i","Math","floor","random","t","GameEngine","game","listeners","range","BLUE","GREEN","RED","YELLOW","callback","push","action","pop","boatCard","some","player","buyBoatAction","targetPlayer","find","includes","givenCoins","giveCardsAction","pirateCards","undefined","hasWon","gameCopy","forEach","listener","getImagePath","process","DECK","EMPTY","pirateCard","CardSprite","isSelected","onClick","size","orientation","style","className","e","preventDefault","backgroundImage","opacity","CardList","setSelected","canSelect","cardOrientation","cardSize","onKeyPress","key","top","deckCard","DeckCard","enabled","clicked","useState","showCard","setShowCard","useEffect","setTimeout","isFlipped","containerStyle","GameDeckActionBar","dispatch","cardClicked","setCardClicked","targetKeyCode","downHandler","code","window","addEventListener","removeEventListener","useKeyDown","lastCardIsPirate","position","width","pirate2","Audio","cannonCount","cannon1","cannon2","hoNo","gold","ShipYard","shipyardCards","slice","PlayerBoard","setSelectedCards","_card","selectedBoatCard","selectedCannons","disabled","min","play","indexAfterPlayerTurn","playerTurnIndex","indexOf","positionIndex","PlayerList","left","marginTop","zIndex","PiratatakBoard","gameEngine","setGame","subscribe","src","AddPlayerComponent","setName","remove","value","onChange","target","placeholder","CreateGamePanel","createGame","setPlayers","item","App","setGameEngine","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e0a6255.chunk.js","sourcesContent":["export enum CardType {\r\n    PIRATE = \"pirate\",\r\n    CANNON = \"cannon\",\r\n    GOLD_COIN = \"gold coin\",\r\n    BOAT = \"boat\",\r\n    EMPTY = \"empty\",\r\n    DECK = \"deck\"\r\n}\r\n\r\nexport class Card{\r\n    type: CardType;\r\n\r\n    constructor(type: CardType){\r\n        this.type = type;\r\n    }\r\n}\r\n\r\nexport enum BoatColor{\r\n    RED = \"red\",\r\n    BLUE = \"blue\",\r\n    YELLOW = \"yellow\",\r\n    GREEN = \"green\"\r\n}\r\n\r\nexport class BoatCard extends Card{\r\n    color: BoatColor;\r\n    piece: 1|2|3|4|5|6;\r\n\r\n    constructor(color: BoatColor, piece: any){\r\n        super(CardType.BOAT);\r\n        this.color = color;\r\n        this.piece = piece;\r\n    }\r\n}\r\n\r\nexport class CannonCard extends Card{\r\n    constructor(){\r\n        super(CardType.CANNON)\r\n    }\r\n}\r\n\r\nexport class GoldCoinCard extends Card{\r\n    constructor(){\r\n        super(CardType.GOLD_COIN);\r\n    }\r\n}\r\n\r\nexport class PirateCard extends Card{\r\n    id: number;\r\n\r\n    constructor(id: number){\r\n        super(CardType.PIRATE);\r\n        this.id = id;\r\n    }\r\n}","import { Card, BoatColor, CardType, BoatCard, PirateCard } from \"./Card\";\r\nimport last from \"lodash/last\";\r\n\r\nexport class Player{\r\n    name: string;\r\n    cards: Array<Card> = [];\r\n    boatColor?: BoatColor;\r\n    selectedCards: Array<Card> = [];\r\n\r\n    constructor(name: string){\r\n        this.name = name;\r\n    }\r\n\r\n    getBoatCards = () => {\r\n        if(this.boatColor){\r\n            return this.cards\r\n                .filter( card => card.type === CardType.BOAT )\r\n                .map( card => card as BoatCard )\r\n                .filter( card => card.color === this.boatColor);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    hasWon(){\r\n        return this.getBoatCards().length === 6;\r\n    }\r\n\r\n    lastCard(){\r\n        return last(this.cards)\r\n    }\r\n    \r\n    lastCardIsPirate(){\r\n        return last(this.cards) instanceof PirateCard;\r\n    }\r\n}","import { Player } from \"./Player\";\r\nimport { Card } from \"./Card\";\r\n\r\nexport class Game{\r\n    players: Array<Player>;\r\n    playerTurn: Player;\r\n    turnCount: number = 0;\r\n    winningPlayer: Player | undefined;\r\n    \r\n    deck: Array<Card>;\r\n    usedDeck: Array<Card> = [];\r\n    lastCard?: Card ;\r\n\r\n    constructor(playerNames: Array<string>, deck: Array<Card>){\r\n        this.players = playerNames.map( name => new Player(name));\r\n        this.playerTurn = this.players[0];\r\n\r\n        this.deck = deck;\r\n    }\r\n}","import { Card } from \"./Card\";\r\n\r\nexport class Action{\r\n}\r\n\r\nexport class TakeCardAction extends Action{\r\n\r\n}\r\n\r\nexport class EndTurnAction extends Action{\r\n\r\n}\r\n\r\nexport class BuyBoatAction extends Action{\r\n    targetCard: Card;\r\n\r\n    constructor(targetCard: Card){\r\n        super();\r\n        this.targetCard = targetCard;\r\n    }\r\n}\r\n\r\nexport class GiveCardsAction extends Action{\r\n    cards: Array<Card>;\r\n\r\n    constructor(cards: Array<Card>){\r\n        super();\r\n        this.cards = cards;\r\n    }\r\n}","export const shuffle = (array: Array<any>) => {\r\n    let m = array.length;    \r\n    // While there remain elements to shuffle…\r\n    while (m) {\r\n        // Pick a remaining element…\r\n        const i = Math.floor(Math.random() * m--);\r\n    \r\n        // And swap it with the current element.\r\n        const t = array[m];\r\n        array[m] = array[i];\r\n        array[i] = t;\r\n    }\r\n    return array;\r\n}","import range from \"lodash/range\";\r\nimport { Game } from \"./model/Game\"\r\nimport { CardType, BoatCard, PirateCard, GoldCoinCard, CannonCard, BoatColor, Card } from \"./model/Card\";\r\nimport { Player } from \"./model/Player\";\r\nimport { Action, TakeCardAction, EndTurnAction, BuyBoatAction, GiveCardsAction } from \"./model/Actions\";\r\nimport { shuffle } from \"../common/ArrayTools\";\r\n\r\ntype GameListener = (game: Game) => void;\r\n\r\nconst isPlayerBoatColorCard = (player: Player) => (card: Card) => {\r\n    if(player.boatColor && card.type === CardType.BOAT){\r\n        const boatCard = card as BoatCard;\r\n        return boatCard.color === player.boatColor;\r\n    }\r\n    return false;\r\n} \r\n\r\nexport class GameEngine{\r\n    game: Game;\r\n    private listeners: Array<GameListener> = [];\r\n\r\n    constructor(playerNames: Array<string>){\r\n        const deck = [\r\n            ...range(1, 21).map( i => new GoldCoinCard()),\r\n            ...range(1, 4).map( i => new CannonCard()),\r\n            ...range(1, 9).map( i => new PirateCard(i)),\r\n            ...range(1, 7).map( i => new BoatCard(BoatColor.BLUE, i)),\r\n            ...range(1, 7).map( i => new BoatCard(BoatColor.GREEN, i)),\r\n            ...range(1, 7).map( i => new BoatCard(BoatColor.RED, i)),\r\n            ...range(1, 7).map( i => new BoatCard(BoatColor.YELLOW, i)),\r\n        ];\r\n        shuffle(deck);\r\n        this.game = new Game(playerNames, deck);\r\n    }\r\n\r\n    subscribe(callback: GameListener){\r\n        this.listeners.push(callback);\r\n    }\r\n\r\n    dispatch(action: Action){\r\n        if(action instanceof TakeCardAction){\r\n            const card = this.game.deck.pop();\r\n            this.game.lastCard = card;\r\n            if(card){\r\n                this.game.playerTurn.cards.push(card);\r\n                if(!this.game.playerTurn.boatColor && card.type === CardType.BOAT){\r\n                    const boatCard = card as BoatCard;\r\n                    if(!this.game.players.some( player => player.boatColor === boatCard.color)){\r\n                        this.game.playerTurn.boatColor = boatCard.color;\r\n                    }\r\n                }\r\n            }\r\n            if(this.game.deck.length === 0){\r\n                shuffle(this.game.usedDeck);\r\n                this.game.deck = this.game.usedDeck;\r\n                this.game.usedDeck = [];\r\n            }\r\n        }\r\n        if(action instanceof BuyBoatAction){\r\n            const buyBoatAction = action as BuyBoatAction;\r\n            const targetPlayer = this.game.players.find( player => player.cards.includes(buyBoatAction.targetCard));\r\n            const givenCoins: Array<Card> = [];\r\n            this.game.playerTurn.cards = [...this.game.playerTurn.cards\r\n                .filter( card => {\r\n                    if(card.type === CardType.GOLD_COIN && givenCoins.length < 3){\r\n                        givenCoins.push(card);\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }), buyBoatAction.targetCard];\r\n            if(targetPlayer){\r\n                targetPlayer.cards = [\r\n                    ...targetPlayer.cards.filter( card => card !== buyBoatAction.targetCard), \r\n                    ...givenCoins\r\n                ];\r\n            }\r\n        }\r\n        if(action instanceof GiveCardsAction){\r\n            const giveCardsAction = action as GiveCardsAction;\r\n            const pirateCards = this.game.playerTurn.cards.filter(card => card.type === CardType.PIRATE);\r\n            this.game.playerTurn.cards = this.game.playerTurn.cards.filter( card => !giveCardsAction.cards.includes(card) && card.type !== CardType.PIRATE);\r\n            this.game.usedDeck = [...this.game.usedDeck, ...pirateCards, ...giveCardsAction.cards];\r\n            // Check if player still has boat color\r\n            if(!this.game.playerTurn.cards.some(isPlayerBoatColorCard(this.game.playerTurn))){\r\n                this.game.playerTurn.boatColor = undefined;\r\n            }\r\n        }\r\n        // Check if next turn expected\r\n        if(action instanceof EndTurnAction || action instanceof GiveCardsAction  || action instanceof BuyBoatAction){\r\n            this.game.turnCount += 1;\r\n            this.game.playerTurn = this.game.players[this.game.turnCount % this.game.players.length];\r\n        }\r\n        // Check if player has won\r\n        this.game.winningPlayer = this.game.players.find(player => player.hasWon());\r\n        // Fire event\r\n        const gameCopy = { ...this.game };\r\n        this.listeners.forEach( listener => listener(gameCopy) );\r\n    }\r\n\r\n\r\n}","import React from 'react'\r\nimport { Card, CardType, BoatCard, PirateCard } from '../game/model/Card'\r\n\r\nimport \"./CardSprite.css\"\r\n\r\nconst getImagePath = (card: Card): string => {\r\n    if(card.type === CardType.CANNON) return `${process.env.PUBLIC_URL}/img/cannon.png`;\r\n    if(card.type === CardType.GOLD_COIN) return `${process.env.PUBLIC_URL}/img/gold_coin.png`;\r\n    if(card.type === CardType.DECK) return `${process.env.PUBLIC_URL}/img/card_back.png`;\r\n    if(card.type === CardType.EMPTY) return `${process.env.PUBLIC_URL}/img/card_empty.jpg`;\r\n    if(card.type === CardType.PIRATE){\r\n        const pirateCard = card as PirateCard;\r\n        return `${process.env.PUBLIC_URL}/img/pirate_${pirateCard.id}.png`;\r\n    }\r\n    if(card.type === CardType.BOAT){\r\n        const boatCard = card as BoatCard;\r\n        return `${process.env.PUBLIC_URL}/img/boat_${boatCard.color}_${boatCard.piece}.jpg`;\r\n    } \r\n    return `${process.env.PUBLIC_URL}/img/card_back.png`;\r\n}\r\n\r\nexport const CardSprite = ({ card, \r\n    isSelected = false, \r\n    onClick,\r\n    size = \"small\",\r\n    orientation = \"vertical\",\r\n    style,\r\n    className\r\n} : { \r\n    card?: Card, \r\n    isSelected?: boolean,\r\n    onClick?: (card: Card) => void,\r\n    size?: \"small\" | \"normal\"| \"large\",\r\n    orientation?: \"vertical\" | \"horizontal\",\r\n    style?: any,\r\n    className?: string\r\n}) => {\r\n    if(!card) return null;\r\n    return <div \r\n        className={`card ${isSelected && \"selected\"} ${onClick? \"selectable\": \"\"} ${size} ${orientation} ${className}`} \r\n        onClick={e => {\r\n            e.preventDefault();\r\n            onClick && onClick(card);\r\n        }}\r\n        style={{ backgroundImage: `url(${getImagePath(card)})`, opacity: card.type === CardType.EMPTY? 0.5 : 1, ...style }}\r\n    />\r\n}","import React, { KeyboardEvent } from 'react'\r\nimport { Card } from '../game/model/Card'\r\nimport { CardSprite } from './CardSprite';\r\n\r\nimport \"./CardList.css\";\r\n\r\nexport const CardList = ({ \r\n    cards, \r\n    selectedCards, \r\n    setSelected, \r\n    canSelect, \r\n    orientation = \"horizontal\",\r\n    cardOrientation = \"vertical\",\r\n    cardSize = \"small\",\r\n    onKeyPress\r\n} : { \r\n    cards: Array<Card>, \r\n    selectedCards: Array<Card>,\r\n    setSelected?: (card: Card) => void,\r\n    canSelect?: (card:Card) => boolean,\r\n    orientation?: \"vertical\"|\"horizontal\"\r\n    cardOrientation?: \"vertical\" | \"horizontal\",\r\n    cardSize?: \"small\" | \"normal\" | \"large\",\r\n    onKeyPress?: (e: KeyboardEvent) => void\r\n}) => {\r\n    return <div className={`card-list ${orientation}`} onKeyPress={onKeyPress}>\r\n        {cards.map( (card, i) => <CardSprite \r\n            key={i} \r\n            className=\"fade-in\"\r\n            card={card} \r\n            isSelected={selectedCards.includes(card)} \r\n            onClick={canSelect && canSelect(card)? setSelected : undefined }\r\n            orientation={cardOrientation}\r\n            size={cardSize}\r\n            style={orientation === \"vertical\"? { top: `${i}px` } : null}\r\n        />)}\r\n    </div>\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { CardSprite } from './CardSprite'\r\nimport { CardType, Card } from '../game/model/Card';\r\nimport ReactCardFlip from 'react-card-flip';\r\n\r\nconst deckCard = new Card(CardType.DECK);\r\n\r\nexport const DeckCard = ({ \r\n    card, \r\n    enabled, \r\n    style, \r\n    onClick,\r\n    clicked\r\n} : { \r\n    card: Card,\r\n    enabled: boolean,\r\n    style: any;\r\n    onClick?: () => void,\r\n    clicked?: boolean\r\n}) => {\r\n    const [showCard, setShowCard] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if(enabled && clicked){\r\n            setShowCard(1);\r\n        }\r\n        if(showCard === 1){\r\n            setTimeout(() => {\r\n                setShowCard(2);\r\n                if(onClick) onClick();\r\n            }, 600);\r\n        }\r\n    }, [showCard, onClick, clicked, enabled])\r\n\r\n    if(showCard === 2) return null;\r\n    return <ReactCardFlip isFlipped={showCard > 0} containerStyle={style}>\r\n        <CardSprite \r\n            card={deckCard} \r\n            onClick={enabled? () => setShowCard(1) : undefined} \r\n            size=\"normal\"\r\n        />\r\n        <CardSprite \r\n            card={card} \r\n            size=\"normal\"\r\n        />\r\n    </ReactCardFlip>;\r\n}","import React, { useState } from 'react';\r\nimport { Action, TakeCardAction } from '../game/model/Actions';\r\nimport { Card, CardType } from '../game/model/Card';\r\nimport { Game } from '../game/model/Game';\r\nimport { CardList } from './CardList';\r\nimport { DeckCard } from './DeckCard';\r\nimport { useKeyDown } from '../common/useKeyDownHook';\r\nimport last from 'lodash/last';\r\n\r\nexport const GameDeckActionBar = ({ game, dispatch, className } : { \r\n    game: Game,\r\n    dispatch: (action: Action) => void,\r\n    className?: string\r\n}) => {\r\n    const [cardClicked, setCardClicked] = useState<Card|undefined>();\r\n    useKeyDown(\"Space\", () => !cardClicked && !game.playerTurn.lastCardIsPirate() && setCardClicked(last(game.deck)));\r\n\r\n    return <div className={`game-deck surface ${className}`}>\r\n        <div>\r\n            <h4>Deck</h4>\r\n            <div className={`card-list vertical fixed`}>\r\n                {game.deck.map( (card, i) => <DeckCard \r\n                    key={i}\r\n                    card={card}\r\n                    enabled={ !game.playerTurn.lastCardIsPirate() && i === game.deck.length -1 }\r\n                    onClick={ () => {\r\n                        dispatch(new TakeCardAction());\r\n                        setCardClicked(undefined);\r\n                    }}\r\n                    style={{ position: \"absolute\", top: `${i}px`, width: 100 }}\r\n                    clicked={cardClicked === card}\r\n                />)}\r\n            </div>\r\n        </div>\r\n        <div>\r\n            <h4>Used Deck</h4>\r\n            <CardList\r\n                cards={game.usedDeck.map( card => new Card(CardType.DECK))}\r\n                selectedCards={[]}\r\n                canSelect={() => false}\r\n                setSelected={ undefined }\r\n                orientation=\"vertical\"\r\n                cardSize=\"normal\"\r\n            />\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { useEffect } from \"react\";\r\n\r\n// Hook\r\nexport function useKeyDown(targetKeyCode: string, callback: () => void) {\r\n    // If pressed key is our target key then set to true\r\n    function downHandler(e : KeyboardEvent) {\r\n        if (e.code === targetKeyCode) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    // Add event listeners\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', downHandler);\r\n        // Remove event listeners on cleanup\r\n        return () => {\r\n            window.removeEventListener('keydown', downHandler);\r\n        };\r\n    }, []); // Empty array ensures that effect is only run on mount and unmount\r\n}","const pirate1 = new Audio(`${process.env.PUBLIC_URL}/sounds/pirate-1.m4a`);\r\nconst pirate2 = new Audio(`${process.env.PUBLIC_URL}/sounds/pirate-2.m4a`);\r\n\r\nlet cannonCount = 0;\r\nconst cannon1 = new Audio(`${process.env.PUBLIC_URL}/sounds/cannon-1.m4a`);\r\nconst cannon2 = new Audio(`${process.env.PUBLIC_URL}/sounds/cannon-2.m4a`);\r\n\r\nconst hoNo = new Audio(`${process.env.PUBLIC_URL}/sounds/ho_no.m4a`);\r\nconst gold = new Audio(`${process.env.PUBLIC_URL}/sounds/gold.m4a`);\r\n\r\nexport const playPirate = (pirateNo: number) => {\r\n    // if(pirateNo % 2 === 0) pirate1.play();    \r\n    pirate2.play();    \r\n}\r\n\r\nexport const playCannon = () => {\r\n    if(cannonCount % 2 === 0) cannon1.play();\r\n    if(cannonCount % 2 === 1) cannon2.play();\r\n    cannonCount++;\r\n}\r\n\r\nexport const playHoNo = () => {\r\n    hoNo.play();\r\n}\r\n\r\nexport const playGold = () => {\r\n    gold.play();\r\n}","import React from 'react'\r\nimport { Card, BoatCard, CardType } from '../game/model/Card'\r\nimport { CardSprite } from './CardSprite';\r\nimport \"./Shipyard.css\";\r\n\r\nexport const ShipYard = ({ cards, selectedCards, setSelected, canSelect } : { \r\n    cards: Array<BoatCard>,\r\n    selectedCards: Array<Card>,\r\n    setSelected: (card: Card) => void,\r\n    canSelect: (card:Card) => boolean\r\n}) => {\r\n    const shipyardCards = [1, 2, 3, 4, 5, 6].map( piece => cards.find(card => card.piece === piece) ?? new Card(CardType.EMPTY));\r\n    return <div className=\"shipyard\">\r\n        <div className=\"row\">\r\n            {shipyardCards.slice(0, 3).map( (card, i) => <CardSprite key={i} \r\n                card={card}\r\n                isSelected={selectedCards.includes(card)}\r\n                onClick={card.type !== CardType.EMPTY && canSelect(card)? setSelected : undefined}\r\n                size=\"small\"\r\n            />)}\r\n        </div>\r\n        <div className=\"row\">\r\n            {shipyardCards.slice(3, 6).map( (card, i) => <CardSprite key={i} \r\n                card={card}\r\n                isSelected={selectedCards.includes(card)}\r\n                onClick={ card.type !== CardType.EMPTY && canSelect(card)? setSelected : undefined }\r\n                size=\"small\"\r\n            />)}\r\n        </div>\r\n    </div>\r\n}","import React from 'react'\r\nimport { CardList } from './CardList'\r\nimport { CardType, BoatCard, Card } from '../game/model/Card'\r\nimport { Player } from '../game/model/Player'\r\nimport { ShipYard } from './Shipyard'\r\nimport { Action, BuyBoatAction, GiveCardsAction, EndTurnAction } from '../game/model/Actions'\r\nimport { playCannon, playHoNo } from '../game/Sounds'\r\n\r\nexport const PlayerBoard = ({ player, playerTurn, selectedCards, setSelectedCards, dispatch, style } : {\r\n    player: Player,\r\n    playerTurn: Player,\r\n    selectedCards: Array<Card>,\r\n    setSelectedCards: (cards: Array<Card>) => void\r\n    dispatch: (action: Action) => void,\r\n    style?: any\r\n}) => {\r\n    const setSelected = (card: Card) => {\r\n        if(selectedCards.includes(card)){\r\n            setSelectedCards(selectedCards.filter(_card => _card !== card));\r\n        }else{\r\n            setSelectedCards([...selectedCards, card]);\r\n        }\r\n    }\r\n\r\n    const selectedBoatCard = selectedCards.length === 1 && selectedCards[0].type === CardType.BOAT? selectedCards[0] as BoatCard : null; \r\n    const selectedCannons = selectedCards.filter( card => card.type === CardType.CANNON );\r\n    return <div key={player.name} className={`player ${playerTurn === player? \"active\": \"inactive\"}`} style={style}>\r\n        <h2>{player.name}</h2>\r\n        <div className=\"split\">\r\n            <div>\r\n                <h4>Shipyard</h4>\r\n                <ShipYard \r\n                    cards={player.cards.filter( card => card.type === CardType.BOAT && (card as BoatCard).color === player.boatColor).map(card => card as BoatCard)}\r\n                    selectedCards={selectedCards}\r\n                    setSelected={setSelected}\r\n                    canSelect={() => player === playerTurn }\r\n                />\r\n            </div>\r\n            <div>\r\n                <h4>Cannons</h4>\r\n                <CardList \r\n                    cards={player.cards.filter( card => card.type === CardType.CANNON)} \r\n                    selectedCards={selectedCards} \r\n                    setSelected={ setSelected } \r\n                    canSelect={ card => playerTurn === player }\r\n                    cardOrientation=\"horizontal\"\r\n                />\r\n            </div>\r\n        </div>\r\n        <h4>Treasure</h4>\r\n        <CardList \r\n            cards={player.cards.filter( card => card.type === CardType.GOLD_COIN)} \r\n            selectedCards={selectedCards} \r\n            setSelected={ setSelected } \r\n            canSelect={ card => playerTurn === player && playerTurn.lastCardIsPirate() }\r\n        />\r\n        <CardList \r\n            cards={player.cards.filter( card => card.type === CardType.BOAT && (card as BoatCard).color !== player.boatColor)} \r\n            selectedCards={selectedCards} \r\n            setSelected={ setSelected } \r\n            canSelect={ card => (playerTurn === player && playerTurn.lastCardIsPirate()) || (card as BoatCard).color === playerTurn.boatColor }\r\n        />\r\n        {player === playerTurn && <div>\r\n            {!player.lastCardIsPirate() && <>\r\n                <button onClick={() => dispatch(new EndTurnAction())}>End Turn</button>\r\n                <button \r\n                    disabled={!(selectedBoatCard && selectedBoatCard.color === player.boatColor && !player.cards.includes(selectedBoatCard) && player.cards.filter( card => card.type === CardType.GOLD_COIN).length >= 3)} \r\n                    onClick={() => {\r\n                    dispatch(new BuyBoatAction(selectedCards[0]));\r\n                    setSelectedCards([]);\r\n                }}>Buy Boat</button>\r\n            </>}\r\n            {player.lastCardIsPirate() &&  <>\r\n                \r\n                {selectedCannons.length === 0 && <button \r\n                    disabled={selectedCards.length < Math.min(3, player.cards.length - 1) || selectedCards.length > 3} \r\n                    onClick={() => {\r\n                        dispatch(new GiveCardsAction(selectedCards));\r\n                        setSelectedCards([]);\r\n                        playHoNo();\r\n                    }}\r\n                >{Math.min(3, player.cards.length - 1) > 0? \"Give Cards\" : \"End Turn\"}</button>}\r\n                {selectedCannons.length > 0 && <button onClick={() => {\r\n                    dispatch(new GiveCardsAction([selectedCannons[0]]));\r\n                    setSelectedCards([]);\r\n                    playCannon();\r\n                }}>Use Cannon!</button>}\r\n            </>}\r\n        </div>}\r\n    </div>\r\n}","import React from 'react'\r\nimport { Game } from '../game/model/Game'\r\nimport { Card } from '../game/model/Card'\r\nimport { PlayerBoard } from './PlayerBoard'\r\nimport { Action } from '../game/model/Actions'\r\nimport { Player } from '../game/model/Player'\r\n\r\nconst indexAfterPlayerTurn = (game: Game, player: Player) => {\r\n    const playerTurnIndex = game.players.indexOf(game.playerTurn);\r\n    const playerIndex = game.players.indexOf(player);\r\n    let positionIndex = playerIndex - playerTurnIndex;\r\n    if(positionIndex < 0){\r\n        positionIndex = game.players.length + positionIndex;\r\n    } \r\n    return positionIndex-1;\r\n    ///// Cases for 4 players\r\n    // [0] -  1  -  2  -  3  => 0 - 1 - 2 - 3\r\n    //  0  - [1] -  2  -  3  => 3 - 0 - 1 - 2\r\n    //  0  -  1  - [2] -  3  => 2 - 3 - 0 - 1\r\n    //  0  -  1  -  2  - [3] => 1 - 2 - 3 - 0\r\n}\r\n\r\nexport const PlayerList = ({ game, selectedCards, setSelectedCards, dispatch } : {\r\n    game: Game,\r\n    selectedCards: Array<Card>,\r\n    setSelectedCards: (cards: Array<Card>) => void\r\n    dispatch: (action: Action) => void\r\n}) => {\r\n    return <div className=\"players\">\r\n        {game.players.map( (player, i) => <PlayerBoard \r\n            key={i} \r\n            player={player} \r\n            playerTurn={game.playerTurn} \r\n            selectedCards={selectedCards} \r\n            setSelectedCards={setSelectedCards}\r\n            dispatch={dispatch}\r\n            style={{ \r\n                left: game.playerTurn === player? \"20px\": `calc(var(--player-width) + ${indexAfterPlayerTurn(game, player)} * var(--player-shift))`,\r\n                marginTop: game.playerTurn === player? 0 : -55 + indexAfterPlayerTurn(game, player)*40,\r\n                zIndex: game.playerTurn === player? 0 : 1000 - indexAfterPlayerTurn(game, player) * 100\r\n            }}\r\n        />)}\r\n    </div>\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { GameEngine } from '../game/GameEngine';\r\nimport { Game } from '../game/model/Game';\r\nimport \"./Piratatak.css\";\r\nimport { GameDeckActionBar } from './GameDeckActionBar';\r\nimport { PlayerBoard } from './PlayerBoard';\r\nimport { Card, PirateCard, GoldCoinCard } from '../game/model/Card';\r\nimport { CardSprite } from './CardSprite';\r\nimport last from 'lodash/last';\r\nimport { playPirate, playGold } from '../game/Sounds';\r\nimport { PlayerList } from './PlayerList';\r\n\r\nexport const PiratatakBoard = ({ gameEngine } : { gameEngine: GameEngine }) => {\r\n    const [game, setGame] : [Game, any] = useState(gameEngine.game);\r\n    const [selectedCards, setSelectedCards]: [Array<Card>, any] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setGame(gameEngine.game);\r\n        gameEngine.subscribe( game => setGame(game));\r\n    }, [gameEngine]);\r\n\r\n    useEffect(() => {\r\n        const lastCard = game.playerTurn.lastCard();\r\n        if(lastCard instanceof PirateCard){\r\n            const pirateCard = game.playerTurn.lastCard() as PirateCard;\r\n            playPirate(pirateCard.id);\r\n        }else if(lastCard instanceof GoldCoinCard){\r\n            playGold();\r\n        }\r\n    }, [game])\r\n\r\n    return <div className=\"game-board\">\r\n        {game.winningPlayer && <div className=\"winning-player surface\">\r\n            <img src={`${process.env.PUBLIC_URL}/img/win-captain.png`} />{game.winningPlayer.name} WIN!!!\r\n        </div>}\r\n        <PlayerList \r\n            game={game}\r\n            selectedCards={selectedCards}\r\n            setSelectedCards={setSelectedCards}\r\n            dispatch={action => gameEngine.dispatch(action)}\r\n        />\r\n        {game.playerTurn.lastCardIsPirate() && <div className={`surface event-card`}>\r\n            <h2>PIRATE!</h2>\r\n            <CardSprite \r\n                className=\"shake\"\r\n                card={last(game.playerTurn.cards)}\r\n                size=\"large\"\r\n            />\r\n        </div>}\r\n        {!game.winningPlayer && <GameDeckActionBar \r\n            game={game}\r\n            dispatch={action => gameEngine.dispatch(action)}\r\n        />}\r\n    </div>\r\n}","import React, { useState } from 'react'\r\n\r\nconst AddPlayerComponent = ({ \r\n    name, \r\n    setName,\r\n    remove\r\n} : {\r\n    name: string,\r\n    setName: (name: string) => void,\r\n    remove: () => void\r\n}) => {\r\n    return <div>\r\n        <input \r\n            type=\"text\" \r\n            value={name} \r\n            onChange={ e => setName(e.target.value)} \r\n            placeholder=\"Player name...\"\r\n        />\r\n        <button onClick={remove}>X</button>\r\n    </div>\r\n}\r\n\r\nexport const CreateGamePanel = ({ createGame } : {\r\n    createGame: (players: Array<string>) => void\r\n}) => {\r\n    const [players, setPlayers] = useState([{ name: \"\"}, { name: \"\"} ]);\r\n    return <div>\r\n        {players.map( (player, i) => <AddPlayerComponent \r\n            key={i} \r\n            name={player.name} \r\n            setName={name => {\r\n                setPlayers(players.map( item => item === player? ({ name }) : item ));\r\n            }}\r\n            remove={() => setPlayers(players.filter( item => item !== player ))} \r\n        />)}\r\n        <button \r\n            disabled={players.length === 4} onClick={() => setPlayers([...players, { name: \"\" }])}>Add player</button>\r\n        <button \r\n            onClick={ () => createGame(players.map( player => player.name))}\r\n            disabled={ players.length === 0 || players.length > 4}\r\n        >\r\n                Start Game!\r\n        </button>\r\n    </div>\r\n}","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { GameEngine } from './game/GameEngine';\r\nimport { PiratatakBoard } from './components/PiratatakBoard';\r\nimport { CreateGamePanel } from './components/CreateGamePanel';\r\n\r\nfunction App() {\r\n  const [gameEngine, setGameEngine] = useState(null);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Piratatak! <button onClick={() => setGameEngine(null)}>New Game</button></h1>\r\n      {!gameEngine && <CreateGamePanel createGame={ playerNames => setGameEngine(new GameEngine(playerNames)) }/>}\r\n      {gameEngine && <PiratatakBoard gameEngine={gameEngine} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}